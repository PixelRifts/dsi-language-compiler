Ball :: struct {
	x: i32;
	y: i32;
	px: i32;
	py: i32;
	vx: i32;
	vy: i32;
};

main :: func () {
	write 0x4000304, cast(u32) 0x8003;
	write 0x4000000, cast(u32) 0x20000;
	write 0x4000240, cast(u8)  0x80;
	
	ball: Ball;
	ball.x = 40;
	ball.y = 40;
	ball.px = 40;
	ball.py = 40;
	ball.vx = 1;
	ball.vy = 1;
	left_bumper := 0;
	right_bumper := 0;
	
	base := (cast(^u16)0x6800000);
	ctr := 0;
	running := 1;
	while running {
		key_states := cast(i32)((cast(^u16)0x4000130)^);
		if ((key_states >> 6)&1) == 0 left_bumper = left_bumper - 1; // Up
		if ((key_states >> 7)&1) == 0 left_bumper = left_bumper + 1; // Down
		if ((key_states >> 1)&1) == 0 right_bumper = right_bumper - 1; // A
		if ((key_states >> 0)&1) == 0 right_bumper = right_bumper + 1; // B
		
		if left_bumper < 0    left_bumper = 0;
		if left_bumper > 176  left_bumper = 176;
		if right_bumper < 0   right_bumper = 0;
		if right_bumper > 176 right_bumper = 176;
		
		ctr = ctr + 1;
		if ctr > 3 {
			ctr = 0;
			ball.px = ball.x;
			ball.py = ball.y;
			ball.x = ball.x + ball.vx;
			ball.y = ball.y + ball.vy;
			
			if ball.y > 190 {
				ball.y = 190;
				ball.vy = -ball.vy;
			}
			if ball.y < 2 {
				ball.y = 2;
				ball.vy = -ball.vy;
			}
			if ball.x < 10 {
				if (ball.y > left_bumper) {
					if (ball.y < (left_bumper + 20))
						ball.vx = 1;
					else running = 0;
				} else running = 0;
			}
			if ball.x > 248 {
				if (ball.y > right_bumper) {
					if (ball.y < (right_bumper + 20))
						ball.vx = -1;
					else running = 0;
				} else running = 0;
			}
		}
		
		draw_ball(&ball);

		draw_left_bumper(left_bumper);
		draw_right_bumper(right_bumper);
	}
};

draw_left_bumper :: func (y: i32) {
	draw_bumper(cast(^u16)6, y);
};

draw_right_bumper :: func (y: i32) {
	draw_bumper(cast(^u16)500, y);
};

draw_bumper :: func(beginning_off: ^u16, y: i32) {
	base := (cast(^u16)0x6800000) + beginning_off;

	key_stat := (cast(^u16) 0x4000130)^;
	wiper := cast(^u16)0;
	h := 192;
	while h {
		w := 3;
		edited := 0;
		effective_h := 192-h;

		if (y<effective_h) {
			if ((y+20)>effective_h) {
				while w {
					(base+wiper)^ = cast(u16)0x7EE0;
					wiper = wiper + cast(^u16)2;
					w = w - 1;
				}
				edited = 1;
			}
		}
		if !edited {
			while w {
				(base+wiper)^ = cast(u16)0x0000;
				wiper = wiper + cast(^u16)2;
				w = w - 1;
			}
		}

		wiper = wiper + cast(^u16)506;
		h = h - 1;
	}
};

draw_ball :: func(ball: ^Ball) {
	y := ball->py-2;
	i := 5;
	while i {
		j := 5;
		x := ball->px-2;
		while j {
			(cast(^u16)0x6800000
	 		+ cast(^u16)(x*2)
	 		+ cast(^u16)(y*512))^ = cast(u16)0x0000;
			j = j - 1;
			x = x + 1;
		}
		i = i - 1;
		y = y + 1;
	}

	y = ball->y-2;
	i = 5;
	while i {
		j := 5;
		x := ball->x-2;
		while j {
			(cast(^u16)0x6800000
	 		+ cast(^u16)(x*2)
	 		+ cast(^u16)(y*512))^ = cast(u16)0x7EE0;
			j = j - 1;
			x = x + 1;
		}
		i = i - 1;
		y = y + 1;
	}
};